{"example1/README.md":"# example1 \n\n## Task 1. Add normalization to Price variable\n### Example answer\nIn `main.py` after `y = data['Price']` add\n```\nmin_y, max_y = y.min(), (y.max()-y.min())\ny -= y.min()\ny /= y.max()\n```\n\n## Task 2. Store performance of all models\n### Example answer\nIn `comparator.py` in method `__init__` add\n```\nself.performance = []\n```\nIn `comparator.py` in method `fit_and_evaluate` add\n```\nself.performance.append(mse)\n```","example1/data/house_prices.csv":"Id,Area,Bedrooms,Bathrooms,Price\n1,2104,3,2,399900\n2,1600,3,2,329900\n3,2400,3,2,369000\n4,1416,2,2,232000\n5,3000,4,3,539900\n6,2500,2,1,400500\n7,2800,3,2,450400\n8,1200,2,1,168500\n9,2400,3,2,369000\n10,2500,2,2,280000\n11,4600,4,2,742800\n12,2200,3,1,200050","example1/main.py":"from src.comparator import ModelComparator\nfrom src.visualizer import ResultVisualizer\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nimport pandas as pd\n\n# Load dataset\ndata = pd.read_csv('data/house_prices.csv')\nX = data[['Area', 'Bedrooms', 'Bathrooms']]\ny = data['Price']\n\n# Split the dataset\nX_train, X_temp, y_train, y_temp = train_test_split(X, y, test_size=0.4, random_state=42)\nX_valid, X_test, y_valid, y_test = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42)\n\n# Initialize models\nmodels = [LinearRegression(), DecisionTreeRegressor()]\n\n# Create comparator and find best model\ncomparator = ModelComparator(models)\ncomparator.fit_and_evaluate(X_train, y_train, X_valid, y_valid)\nbest_model = comparator.get_best_model()\n\n# Evaluate on test data\ntest_predictions = best_model.predict(X_test)\ntest_mse = mean_squared_error(y_test, test_predictions)\nprint(f\"Test MSE of Best Model: {test_mse}\")\n\nvisualizer = ResultVisualizer()\nvisualizer.vis_data(data)\nvisualizer.vis_preds(y_test, test_predictions)\nvisualizer.vis_feature_importance(best_model)\n","example1/src/comparator.py":"from sklearn.metrics import mean_squared_error\nimport numpy as np\n\nclass ModelComparator:\n    def __init__(self, models):\n        self.models = models\n        self.best_model = None\n\n    def fit_and_evaluate(self, X_train, y_train, X_valid, y_valid):\n        best_mse = np.inf\n        for model in self.models:\n            model.fit(X_train, y_train)\n            predictions = model.predict(X_valid)\n            mse = mean_squared_error(y_valid, predictions)\n            if mse < best_mse:\n                best_mse = mse\n                self.best_model = model\n\n    def get_best_model(self):\n        return self.best_model\n","example1/src/visualizer.py":"import matplotlib.pyplot as plt\nimport seaborn as sns\nclass ResultVisualizer():\n    def vis_data(self, data):\n        sns.pairplot(data, x_vars=['Area', 'Bedrooms', 'Bathrooms'], y_vars='Price', height=4, aspect=1, kind='scatter')\n        plt.savefig('data.png')\n        plt.clf()\n        plt.close()\n    \n    def vis_preds(self, y_true, y_pred):\n        plt.scatter(y_true, y_pred)\n        plt.xlabel('Actual Prices')\n        plt.ylabel('Predicted Prices')\n        plt.title('Predicted vs Actual Prices')\n        plt.plot([y_true.min(), y_true.max()], [y_true.min(), y_true.max()], 'k--', lw=2)\n        plt.savefig('preds.png')\n        plt.clf()\n        plt.close()\n\n    def vis_feature_importance(self, best_model):\n        if hasattr(best_model, 'feature_importances_'):\n            sns.barplot(x=best_model.feature_importances_, y=['Area', 'Bedrooms', 'Bathrooms'])\n            plt.title('Feature Importance')\n            plt.savefig('feat.png')\n            plt.clf()\n            plt.close()"}