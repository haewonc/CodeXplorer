{
        "example2/README.md":
        "# example2\n\n## Task 1. Add humidity threshold (default 80) to extreme event. \n### Example answer\nIn `analysis.py` at `identify_extreme_events` and `extreme_weather_frequency`\nIn `result.py` at `print_extreme_events`\n\n## Task 2. Reformat the date to %Y-%m-%d format.\nCurrently, its printed out as '2023-11-14 00:00:00'.\nHint: `formatted_date = date.strftime('%Y-%m-%d')`\n### Example answer\nIn `result.py` at `print_extreme_events` and `print_max_min_temp_days`"
,

        "example2/analysis.py":
        "import numpy as np\n\ndef calculate_daily_average(data):\n    \"\"\"\n    Calculate daily average of temperature, humidity, and wind speed for each city.\n    \"\"\"\n    averages = {}\n    for city, daily_data in data.items():\n        daily_avg = []\n        for _, temp, hum, wind in daily_data:\n            avg = (temp + hum + wind) / 3\n            daily_avg.append(avg)\n        averages[city] = daily_avg\n    return averages\n\ndef calculate_monthly_average(data):\n    \"\"\"\n    Calculate monthly average of temperature, humidity, and wind speed for each city.\n    \"\"\"\n    monthly_avg = {}\n    for city, daily_data in data.items():\n        monthly_data = {}\n        for date, temp, hum, wind in daily_data:\n            month = date.month\n            if month not in monthly_data:\n                monthly_data[month] = []\n            monthly_data[month].append((temp, hum, wind))\n        \n        for month, values in monthly_data.items():\n            avg = np.mean(values, axis=0)\n            if city not in monthly_avg:\n                monthly_avg[city] = {}\n            monthly_avg[city][month] = avg\n    return monthly_avg\n\ndef identify_extreme_events(data, temp_threshold=35, wind_threshold=75):\n    \"\"\"\n    Identify days with extreme weather events based on given thresholds.\n    \"\"\"\n    extreme_events = {}\n    for city, daily_data in data.items():\n        extreme_days = []\n        for date, temp, hum, wind in daily_data:\n            if temp > temp_threshold or wind > wind_threshold:\n                extreme_days.append((date, temp, wind))\n        extreme_events[city] = extreme_days\n    return extreme_events\n\ndef temperature_trend_analysis(data):\n    \"\"\"\n    Analyze temperature trends for each city.\n    \"\"\"\n    trends = {}\n    for city, daily_data in data.items():\n        temps = [temp for _, temp, _, _ in daily_data]\n        trend = np.polyfit(range(len(temps)), temps, 1)  # Linear trend\n        trends[city] = trend\n    return trends\n\ndef correlation_analysis(data):\n    \"\"\"\n    Calculate correlation between different weather parameters for each city.\n    \"\"\"\n    correlations = {}\n    for city, daily_data in data.items():\n        temps = [temp for _, temp, _, _ in daily_data]\n        hums = [hum for _, _, hum, _ in daily_data]\n        winds = [wind for _, _, _, wind in daily_data]\n\n        temp_hum_corr = np.corrcoef(temps, hums)[0, 1]\n        temp_wind_corr = np.corrcoef(temps, winds)[0, 1]\n        hum_wind_corr = np.corrcoef(hums, winds)[0, 1]\n\n        correlations[city] = {\n            \"Temp-Humidity\": temp_hum_corr,\n            \"Temp-Wind\": temp_wind_corr,\n            \"Humidity-Wind\": hum_wind_corr\n        }\n    return correlations\n\ndef extreme_weather_frequency(data, temp_threshold=35, wind_threshold=75):\n    \"\"\"\n    Analyze the frequency of extreme weather events.\n    \"\"\"\n    frequency = {}\n    for city, daily_data in data.items():\n        count = sum(1 for _, temp, _, wind in daily_data if temp > temp_threshold or wind > wind_threshold)\n        frequency[city] = count\n    return frequency\n\ndef yearly_summary(data):\n    \"\"\"\n    Generate a summary of yearly weather statistics for each city.\n    \"\"\"\n    summary = {}\n    for city, daily_data in data.items():\n        temps = [temp for _, temp, _, _ in daily_data]\n        hums = [hum for _, _, hum, _ in daily_data]\n        winds = [wind for _, _, _, wind in daily_data]\n\n        summary[city] = {\n            \"Average Temp\": np.mean(temps),\n            \"Max Temp\": max(temps),\n            \"Min Temp\": min(temps),\n            \"Average Humidity\": np.mean(hums),\n            \"Average Wind Speed\": np.mean(winds)\n        }\n    return summary\n\ndef find_max_min_temp_days(data):\n    \"\"\"\n    Find the days with the maximum and minimum temperatures for each city.\n    \"\"\"\n    max_min_days = {}\n    for city, daily_data in data.items():\n        max_temp = -float('inf')\n        min_temp = float('inf')\n        max_temp_day = None\n        min_temp_day = None\n\n        for day in daily_data:\n            date, temp, _, _ = day\n            if temp > max_temp:\n                max_temp = temp\n                max_temp_day = date\n            if temp < min_temp:\n                min_temp = temp\n                min_temp_day = date\n\n        max_min_days[city] = {'Max Temp Day': max_temp_day, 'Max Temp': max_temp, \n                              'Min Temp Day': min_temp_day, 'Min Temp': min_temp}\n    return max_min_days"
,

        "example2/datagen.py":
        "import numpy as np\nfrom datetime import timedelta\n\ndef generate_weather_data(start_date, end_date, cities):\n    \"\"\"\n    Generate simulated weather data for given cities between start_date and end_date.\n    Data includes temperature (in Â°C), humidity (%), and wind speed (km/h).\n    \"\"\"\n    delta = end_date - start_date\n    data = {}\n    for city in cities:\n        daily_data = []\n        for day in range(delta.days + 1):\n            date = start_date + timedelta(days=day)\n            temperature = np.random.uniform(-5, 35)  # Simulating temperature\n            humidity = np.random.uniform(20, 100)    # Simulating humidity\n            wind_speed = np.random.uniform(0, 100)   # Simulating wind speed\n            daily_data.append((date, temperature, humidity, wind_speed))\n        data[city] = daily_data\n    return data\n"
,

        "example2/main.py":
        "from datetime import datetime\nfrom datagen import generate_weather_data\nfrom result import Printer\nfrom analysis import *\n\ncities = [\"CityA\", \"CityB\", \"CityC\"]\nstart_date = datetime(2023, 1, 1)\nend_date = datetime(2023, 12, 31)\nweather_data = generate_weather_data(start_date, end_date, cities)\n\ndaily_averages = calculate_daily_average(weather_data)\nmonthly_averages = calculate_monthly_average(weather_data)\nextreme_weather = identify_extreme_events(weather_data)\n\ntemp_trends = temperature_trend_analysis(weather_data)\nweather_correlations = correlation_analysis(weather_data)\nextreme_event_freq = extreme_weather_frequency(weather_data)\nyearly_stats = yearly_summary(weather_data)\nmax_min_temp_days = find_max_min_temp_days(weather_data)\n\nprinter = Printer()\nprinter.print_extreme_events(extreme_weather)\nprinter.print_temperature_trends(temp_trends)\nprinter.print_correlation_analysis(weather_correlations)\nprinter.print_extreme_weather_frequency(extreme_event_freq)\nprinter.print_yearly_summary(yearly_stats)\nprinter.print_max_min_temp_days(max_min_temp_days)"
,

        "example2/result.py":
        "class Printer:\n    def __init__(self):\n        pass\n\n    def print_daily_average(self, daily_averages):\n        print(\"Daily Averages:\")\n        for city, averages in daily_averages.items():\n            print(f\"\\n{city}:\")\n            for avg in averages:\n                print(f\" - {avg:.2f}\")\n\n    def print_monthly_average(self, monthly_averages):\n        print(\"\\nMonthly Averages:\")\n        for city, months in monthly_averages.items():\n            print(f\"\\n{city}:\")\n            for month, avg_values in months.items():\n                print(f\" - Month {month}: Temp: {avg_values[0]:.2f}, Hum: {avg_values[1]:.2f}, Wind: {avg_values[2]:.2f}\")\n\n    def print_extreme_events(self, extreme_events):\n        print(\"\\nExtreme Weather Events:\")\n        for city, events in extreme_events.items():\n            print(f\"\\n{city}:\")\n            for event in events:\n                print(f\" - Date: {event[0]}, Temp: {event[1]:.2f}, Wind: {event[2]:.2f}\")\n\n    def print_temperature_trends(self, trends):\n        print(\"\\nTemperature Trends:\")\n        for city, trend in trends.items():\n            slope, intercept = trend\n            trend_line = \"increasing\" if slope > 0 else \"decreasing\"\n            print(f\"{city}: Trend is {trend_line}, Slope: {slope:.2f}\")\n\n    def print_correlation_analysis(self, correlations):\n        print(\"\\nCorrelations between Weather Parameters:\")\n        for city, corr_values in correlations.items():\n            print(f\"\\n{city}:\")\n            for pair, corr in corr_values.items():\n                print(f\" - {pair}: {corr:.2f}\")\n\n    def print_extreme_weather_frequency(self, frequencies):\n        print(\"\\nFrequency of Extreme Weather Events:\")\n        for city, frequency in frequencies.items():\n            print(f\"{city}: {frequency} events\")\n\n    def print_yearly_summary(self, yearly_stats):\n        print(\"\\nYearly Summary Statistics:\")\n        for city, stats in yearly_stats.items():\n            print(f\"\\n{city}:\")\n            for stat_name, value in stats.items():\n                print(f\" - {stat_name}: {value:.2f}\")\n    \n    def print_max_min_temp_days(self, max_min_temp_days):\n        print(\"\\nDays with Maximum and Minimum Temperatures:\")\n        for city, temp_info in max_min_temp_days.items():\n            print(f\"\\n{city}:\")\n            print(f\" - Maximum Temperature: {temp_info['Max Temp']:.2f} Â°C on {temp_info['Max Temp Day']}\")\n            print(f\" - Minimum Temperature: {temp_info['Min Temp']:.2f} Â°C on {temp_info['Min Temp Day']}\")"
}